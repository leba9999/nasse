// <auto-generated />
using System;
using ImageHandler.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImageHandler.Migrations
{
    [DbContext(typeof(ImageDbContext))]
    [Migration("20240116172916_Metadata")]
    partial class Metadata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ImageHandler.Models.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("ImageHandler.Models.CameraData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Aperture")
                        .HasColumnType("longtext");

                    b.Property<string>("ColorSpace")
                        .HasColumnType("longtext");

                    b.Property<string>("Contrast")
                        .HasColumnType("longtext");

                    b.Property<string>("ExposureTime")
                        .HasColumnType("longtext");

                    b.Property<string>("Flash")
                        .HasColumnType("longtext");

                    b.Property<string>("FocalLenght")
                        .HasColumnType("longtext");

                    b.Property<string>("ISOSpeed")
                        .HasColumnType("longtext");

                    b.Property<string>("ShutterSpeed")
                        .HasColumnType("longtext");

                    b.Property<string>("WhiteBalance")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CameraData");
                });

            modelBuilder.Entity("ImageHandler.Models.Extenssions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Extenssions");
                });

            modelBuilder.Entity("ImageHandler.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MetadataId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<bool>("ThumbnailGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ImageHandler.Models.MetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CameraDataId")
                        .HasColumnType("int");

                    b.Property<int?>("CameraTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtenssionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CameraDataId");

                    b.HasIndex("CameraTypeId");

                    b.HasIndex("ExtenssionTypeId");

                    b.HasIndex("SizeId");

                    b.ToTable("MetaData");
                });

            modelBuilder.Entity("ImageHandler.Models.Sizes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("ImageHandler.Models.Image", b =>
                {
                    b.HasOne("ImageHandler.Models.MetaData", "Metadata")
                        .WithOne("Image")
                        .HasForeignKey("ImageHandler.Models.Image", "MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("ImageHandler.Models.MetaData", b =>
                {
                    b.HasOne("ImageHandler.Models.CameraData", "CameraData")
                        .WithMany()
                        .HasForeignKey("CameraDataId");

                    b.HasOne("ImageHandler.Models.Camera", "CameraType")
                        .WithMany()
                        .HasForeignKey("CameraTypeId");

                    b.HasOne("ImageHandler.Models.Extenssions", "ExtenssionType")
                        .WithMany()
                        .HasForeignKey("ExtenssionTypeId");

                    b.HasOne("ImageHandler.Models.Sizes", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CameraData");

                    b.Navigation("CameraType");

                    b.Navigation("ExtenssionType");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ImageHandler.Models.MetaData", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
